services:
  app:
    build: .
    container_name: inventory-manager-app
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        # Esta condición hace que el servicio 'app' espere a que 'db' esté listo.
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: inventory-BD
    restart: always
    ports:
      - "3317:3306"
    volumes:
      # Mapea un volumen local para asegurar la persistencia de los datos
      - "${DB_VOLUME_PATH}:/var/lib/mysql"
      # Este volumen monta el script V1__init.sql para la inicialización de la base de datos
      - "./docker/V1__init.sql:/docker-entrypoint-initdb.d/V1__init.sql"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network
    healthcheck: # <-- Agrega esto para verificar la salud del contenedor
      # El comando 'mysqladmin ping' verifica si el servidor está en línea.
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u ${DB_USER} -p${DB_ROOT_PASSWORD}" ]
      timeout: 20s
      retries: 10
      start_period: 30s

networks:
  app-network:
    driver: bridge